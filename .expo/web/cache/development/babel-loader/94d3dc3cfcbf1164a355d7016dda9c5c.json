{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/rashighosh/Desktop/MobileAppFrontEnd/App.js\";\nimport React, { useEffect } from 'react';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport thunk from 'redux-thunk';\nimport themeReducer from \"./redux/themeReducer\";\nimport { Navigation, FirstNav } from \"./Navigation\";\nimport AsyncStorage from \"react-native-web/dist/exports/AsyncStorage\";\nvar store = createStore(combineReducers({\n  themeReducer: themeReducer\n}), applyMiddleware(thunk));\nexport default function App() {\n  var _React$useState = React.useState(null),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isFirstLaunch = _React$useState2[0],\n      setIsFirstLaunch = _React$useState2[1];\n\n  useEffect(function () {\n    AsyncStorage.getItem('alreadyLaunched').then(function (value) {\n      if (value == undefined) {\n        AsyncStorage.setItem('alreadyLaunched', true);\n        setIsFirstLaunch(true);\n      } else {\n        setIsFirstLaunch(false);\n      }\n    });\n  }, []);\n\n  if (isFirstLaunch === null) {\n    return null;\n  } else if (isFirstLaunch === true) {\n    return React.createElement(Provider, {\n      store: store,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 14\n      }\n    }, React.createElement(FirstNav, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 7\n      }\n    }));\n  } else {\n    return React.createElement(Provider, {\n      store: store,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 7\n      }\n    }, React.createElement(Navigation, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }\n    }));\n  }\n}","map":{"version":3,"sources":["/Users/rashighosh/Desktop/MobileAppFrontEnd/App.js"],"names":["React","useEffect","Provider","createStore","applyMiddleware","combineReducers","thunk","themeReducer","Navigation","FirstNav","store","App","useState","isFirstLaunch","setIsFirstLaunch","AsyncStorage","getItem","then","value","undefined","setItem"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,YAAP;AACA,SAAQC,UAAR,EAAoBC,QAApB;;AAGA,IAAMC,KAAK,GAAGP,WAAW,CAACE,eAAe,CAAC;AAACE,EAAAA,YAAY,EAAZA;AAAD,CAAD,CAAhB,EAAkCH,eAAe,CAACE,KAAD,CAAjD,CAAzB;AAIA,eAAe,SAASK,GAAT,GAAe;AAAA,wBACcX,KAAK,CAACY,QAAN,CAAe,IAAf,CADd;AAAA;AAAA,MACrBC,aADqB;AAAA,MACNC,gBADM;;AAG5Bb,EAAAA,SAAS,CAAC,YAAM;AACdc,IAAAA,YAAY,CAACC,OAAb,CAAqB,iBAArB,EAAwCC,IAAxC,CAA6C,UAAAC,KAAK,EAAI;AACpD,UAAIA,KAAK,IAAIC,SAAb,EAAwB;AACtBJ,QAAAA,YAAY,CAACK,OAAb,CAAqB,iBAArB,EAAwC,IAAxC;AACAN,QAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACD,OAHD,MAGO;AACLA,QAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACD;AACF,KAPD;AAQD,GATQ,EASN,EATM,CAAT;;AAWA,MAAID,aAAa,KAAK,IAAtB,EAA4B;AAC1B,WAAO,IAAP;AACD,GAFD,MAEO,IAAIA,aAAa,KAAK,IAAtB,EAA4B;AACjC,WAAS,oBAAC,QAAD;AAAU,MAAA,KAAK,EAAGH,KAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACP,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADO,CAAT;AAGD,GAJM,MAIA;AACL,WACE,oBAAC,QAAD;AAAU,MAAA,KAAK,EAAGA,KAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF;AAMD;AAEF","sourcesContent":["import React, { useEffect } from 'react';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport thunk from 'redux-thunk';\nimport themeReducer from './redux/themeReducer';\nimport {Navigation, FirstNav} from './Navigation'\nimport { AsyncStorage } from 'react-native'\n\nconst store = createStore(combineReducers({themeReducer}), applyMiddleware(thunk))\n\n\n\nexport default function App() {\n  const [isFirstLaunch, setIsFirstLaunch] = React.useState(null)\n\n  useEffect(() => {\n    AsyncStorage.getItem('alreadyLaunched').then(value => {\n      if (value == undefined) {\n        AsyncStorage.setItem('alreadyLaunched', true);\n        setIsFirstLaunch(true);\n      } else {\n        setIsFirstLaunch(false);\n      }\n    })\n  }, []);\n\n  if (isFirstLaunch === null) {\n    return null;\n  } else if (isFirstLaunch === true) {\n    return ( <Provider store={ store }>\n      <FirstNav />\n    </Provider>) \n  } else {\n    return (\n      <Provider store={ store }>\n        <Navigation />\n      </Provider>\n      \n    );\n  }\n  \n}\n\n\n\n"]},"metadata":{},"sourceType":"module"}