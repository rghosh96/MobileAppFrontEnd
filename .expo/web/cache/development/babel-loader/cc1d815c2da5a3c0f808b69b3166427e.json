{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/rashighosh/Desktop/MobileAppFrontEnd/components/LoadingScreen.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport * as Font from 'expo-font';\n\nvar LoadingScreen = function (_React$Component) {\n  _inherits(LoadingScreen, _React$Component);\n\n  var _super = _createSuper(LoadingScreen);\n\n  function LoadingScreen() {\n    _classCallCheck(this, LoadingScreen);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(LoadingScreen, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      return _regeneratorRuntime.async(function componentDidMount$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Font.loadAsync({\n                header: require(\"../assets/fonts/PaytoneOne-Regular.tff\")\n              }));\n\n            case 2:\n              this.props.navigation.navigate(\"Dashboard\");\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(View, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 13\n        }\n      }, React.createElement(ActivityIndicator, {\n        size: \"large\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 17\n        }\n      }));\n    }\n  }]);\n\n  return LoadingScreen;\n}(React.Component);\n\nexport { LoadingScreen as default };","map":{"version":3,"sources":["/Users/rashighosh/Desktop/MobileAppFrontEnd/components/LoadingScreen.js"],"names":["React","Font","LoadingScreen","loadAsync","header","require","props","navigation","navigate","Component"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAGA,OAAO,KAAKC,IAAZ,MAAsB,WAAtB;;IAEqBC,a;;;;;;;;;;;;;;;;;;;+CAEPD,IAAI,CAACE,SAAL,CAAe;AACjBC,gBAAAA,MAAM,EAAEC,OAAO;AADE,eAAf,C;;;AAGN,mBAAKC,KAAL,CAAWC,UAAX,CAAsBC,QAAtB,CAA+B,WAA/B;;;;;;;;;;;6BAEK;AACL,aACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,iBAAD;AAAmB,QAAA,IAAI,EAAC,OAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADJ;AAKH;;;;EAbsCR,KAAK,CAACS,S;;SAA5BP,a","sourcesContent":["import React from 'react';\nimport { View, ActivityIndicator } from 'react-native';\n\nimport * as Font from 'expo-font';\n\nexport default class LoadingScreen extends React.Component {\n    async componentDidMount() {\n        await Font.loadAsync({\n            header: require('../assets/fonts/PaytoneOne-Regular.tff')\n        })\n        this.props.navigation.navigate(\"Dashboard\");\n    }\n    render() {\n        return (\n            <View>\n                <ActivityIndicator size=\"large\"/>\n            </View>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}