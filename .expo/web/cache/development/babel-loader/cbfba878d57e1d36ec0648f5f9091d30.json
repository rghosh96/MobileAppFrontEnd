{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _color = _interopRequireDefault(require(\"color\"));\n\nvar _Icon = _interopRequireDefault(require(\"../Icon\"));\n\nvar _theming = require(\"../../core/theming\");\n\nvar _colors = require(\"../../styles/colors\");\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar defaultSize = 64;\n\nvar Avatar = function Avatar(_ref) {\n  var icon = _ref.icon,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? defaultSize : _ref$size,\n      style = _ref.style,\n      theme = _ref.theme,\n      rest = _objectWithoutProperties(_ref, [\"icon\", \"size\", \"style\", \"theme\"]);\n\n  var _ref2 = _reactNative.StyleSheet.flatten(style) || {},\n      _ref2$backgroundColor = _ref2.backgroundColor,\n      backgroundColor = _ref2$backgroundColor === void 0 ? theme.colors.primary : _ref2$backgroundColor,\n      restStyle = _objectWithoutProperties(_ref2, [\"backgroundColor\"]);\n\n  var textColor = rest.color || ((0, _color.default)(backgroundColor).isLight() ? 'rgba(0, 0, 0, .54)' : _colors.white);\n  return React.createElement(_reactNative.View, _extends({\n    style: [{\n      width: size,\n      height: size,\n      borderRadius: size / 2,\n      backgroundColor: backgroundColor\n    }, styles.container, restStyle]\n  }, rest), React.createElement(_Icon.default, {\n    source: icon,\n    color: textColor,\n    size: size * 0.6\n  }));\n};\n\nAvatar.displayName = 'Avatar.Icon';\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n});\n\nvar _default = (0, _theming.withTheme)(Avatar);\n\nexports.default = _default;","map":{"version":3,"sources":["AvatarIcon.tsx"],"names":["defaultSize","Avatar","size","theme","rest","backgroundColor","primary","StyleSheet","textColor","color","width","height","borderRadius","styles","container","justifyContent","alignItems","withTheme"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,IAAMA,WAAW,GAAjB,EAAA;;AAyCA,IAAMC,MAAM,GAAG,SAATA,MAAS,CAAA,IAAA,EAAgE;AAAA,MAA/D,IAA+D,GAAA,IAAA,CAA/D,IAA+D;AAAA,kBAAA,IAAA,CAAvDC,IAAuD;AAAA,MAAvDA,IAAuD,0BAA/D,WAA+D;AAAA,MAA/D,KAA+D,GAAA,IAAA,CAA/D,KAA+D;AAAA,MAA5BC,KAA4B,GAAA,IAAA,CAA5BA,KAA4B;AAAA,MAAlBC,IAAkB,GAAA,wBAAA,CAAA,IAAA,EAAA,CAAA,MAAA,EAAA,MAAA,EAAA,OAAA,EAAA,OAAA,CAAA,CAAA;;AAC7E,MAAA,KAAA,GACEG,wBAAAA,OAAAA,CAAAA,KAAAA,KADF,EAAA;AAAA,8BAAA,KAAA,CAAQF,eAAR;AAAA,MAAQA,eAAR,sCAA0BF,KAAK,CAALA,MAAAA,CAAaG,OAAvC;AAAA,MAAA,SAAA,GAAA,wBAAA,CAAA,KAAA,EAAA,CAAA,iBAAA,CAAA,CAAA;;AAEA,MAAME,SAAS,GACbJ,IAAI,CAAJA,KAAAA,KACCK,oBAAAA,eAAAA,EAAAA,OAAAA,KAAAA,oBAAAA,GAFH,aACEL,CADF;AAIA,SACE,KAAA,CAAA,aAAA,CAAA,iBAAA,EAAA,QAAA,CAAA;AACE,IAAA,KAAK,EAAE,CACL;AACEM,MAAAA,KAAK,EADP,IAAA;AAEEC,MAAAA,MAAM,EAFR,IAAA;AAGEC,MAAAA,YAAY,EAAEV,IAAI,GAHpB,CAAA;AAIEG,MAAAA,eAAAA,EAAAA;AAJF,KADK,EAOLQ,MAAM,CAPD,SAAA,EAAA,SAAA;AADT,GAAA,EAAA,IAAA,CAAA,EAaE,KAAA,CAAA,aAAA,CAAA,aAAA,EAAA;AAAM,IAAA,MAAM,EAAZ,IAAA;AAAoB,IAAA,KAAK,EAAzB,SAAA;AAAsC,IAAA,IAAI,EAAEX,IAAI,GAAG;AAAnD,GAAA,CAbF,CADF;AAPF,CAAA;;AA0BAD,MAAM,CAANA,WAAAA,GAAAA,aAAAA;;AAEA,IAAMY,MAAM,GAAG,wBAAA,MAAA,CAAkB;AAC/BC,EAAAA,SAAS,EAAE;AACTC,IAAAA,cAAc,EADL,QAAA;AAETC,IAAAA,UAAU,EAAE;AAFH;AADoB,CAAlB,CAAf;;eAOeC,wBAAf,MAAeA,C","sourcesContent":["import * as React from 'react';\nimport { View, ViewStyle, StyleSheet, StyleProp } from 'react-native';\nimport color from 'color';\nimport Icon from '../Icon';\nimport { withTheme } from '../../core/theming';\nimport { white } from '../../styles/colors';\nimport type { IconSource } from './../Icon';\n\nconst defaultSize = 64;\n\ntype Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Icon to display for the `Avatar`.\n   */\n  icon: IconSource;\n  /**\n   * Size of the avatar.\n   */\n  size?: number;\n  /**\n   * Custom color for the icon.\n   */\n  color?: string;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * Avatars can be used to represent people in a graphical way.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/avatar-icon.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Avatar } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Avatar.Icon size={24} icon=\"folder\" />\n * );\n * ```\n */\nconst Avatar = ({ icon, size = defaultSize, style, theme, ...rest }: Props) => {\n  const { backgroundColor = theme.colors.primary, ...restStyle } =\n    StyleSheet.flatten(style) || {};\n  const textColor =\n    rest.color ||\n    (color(backgroundColor).isLight() ? 'rgba(0, 0, 0, .54)' : white);\n\n  return (\n    <View\n      style={[\n        {\n          width: size,\n          height: size,\n          borderRadius: size / 2,\n          backgroundColor,\n        },\n        styles.container,\n        restStyle,\n      ]}\n      {...rest}\n    >\n      <Icon source={icon} color={textColor} size={size * 0.6} />\n    </View>\n  );\n};\n\nAvatar.displayName = 'Avatar.Icon';\n\nconst styles = StyleSheet.create({\n  container: {\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n\nexport default withTheme(Avatar);\n"]},"metadata":{},"sourceType":"script"}