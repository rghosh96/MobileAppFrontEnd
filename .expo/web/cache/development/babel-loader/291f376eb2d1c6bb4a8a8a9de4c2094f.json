{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = ImagePickerExample;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar ImagePicker = _interopRequireWildcard(require(\"expo-image-picker\"));\n\nvar _expoConstants = _interopRequireDefault(require(\"expo-constants\"));\n\nvar _masterStyle = require(\"../../theming/masterStyle\");\n\nvar _createStyle = require(\"../../theming/createStyle\");\n\nvar _settingStyle = require(\"../../theming/settingStyle\");\n\nvar _jsxFileName = \"/Users/rashighosh/Desktop/MobileAppFrontEnd/components/Settings/UpdateImage.js\";\n\nfunction ImagePickerExample(props) {\n  var _useState = (0, _react.useState)(null),\n      _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n      image = _useState2[0],\n      setImage = _useState2[1];\n\n  var pickImage = function pickImage() {\n    var _await$ImagePicker$re, status, result;\n\n    return _regenerator.default.async(function pickImage$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(_reactNative.Platform.OS !== 'web')) {\n              _context.next = 6;\n              break;\n            }\n\n            _context.next = 3;\n            return _regenerator.default.awrap(ImagePicker.requestCameraRollPermissionsAsync());\n\n          case 3:\n            _await$ImagePicker$re = _context.sent;\n            status = _await$ImagePicker$re.status;\n\n            if (status !== 'granted') {\n              alert('Sorry, we need camera roll permissions to make this work!');\n            }\n\n          case 6:\n            _context.next = 8;\n            return _regenerator.default.awrap(ImagePicker.launchImageLibraryAsync({\n              mediaTypes: ImagePicker.MediaTypeOptions.Images,\n              allowsEditing: true,\n              aspect: [4, 3],\n              quality: 1\n            }));\n\n          case 8:\n            result = _context.sent;\n            console.log(result);\n\n            if (!result.cancelled) {\n              setImage(result.uri);\n              console.log(\"set image\");\n              console.log(props);\n              props.setImageURI(result.uri);\n            }\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var takeImage = function takeImage() {\n    var _await$ImagePicker$re2, status, result;\n\n    return _regenerator.default.async(function takeImage$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!(_reactNative.Platform.OS !== 'web')) {\n              _context2.next = 6;\n              break;\n            }\n\n            _context2.next = 3;\n            return _regenerator.default.awrap(ImagePicker.requestCameraPermissionsAsync());\n\n          case 3:\n            _await$ImagePicker$re2 = _context2.sent;\n            status = _await$ImagePicker$re2.status;\n\n            if (status !== 'granted') {\n              alert('Sorry, we need camera permissions to make this work!');\n            }\n\n          case 6:\n            _context2.next = 8;\n            return _regenerator.default.awrap(ImagePicker.launchCameraAsync({\n              mediaTypes: ImagePicker.MediaTypeOptions.Images,\n              allowsEditing: true,\n              aspect: [4, 3],\n              quality: 1\n            }));\n\n          case 8:\n            result = _context2.sent;\n            console.log(result);\n\n            if (!result.cancelled) {\n              setImage(result.uri);\n              console.log(\"set image\");\n              console.log(props);\n              props.setImageURI(result.uri);\n            }\n\n          case 11:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return _react.default.createElement(_settingStyle.ImageUploadArea, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }\n  }, image && _react.default.createElement(_createStyle.ProfileImage, {\n    source: {\n      uri: image\n    },\n    style: {\n      width: 200,\n      height: 200\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 19\n    }\n  }), _react.default.createElement(_settingStyle.ImageUploadButtons, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }, _react.default.createElement(_settingStyle.SelectedTheme, {\n    onPress: pickImage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }, \"select image\"), _react.default.createElement(_settingStyle.SelectedTheme, {\n    onPress: takeImage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }, \"take a photo\")));\n}","map":{"version":3,"sources":["/Users/rashighosh/Desktop/MobileAppFrontEnd/components/Settings/UpdateImage.js"],"names":["ImagePickerExample","props","image","setImage","pickImage","Platform","OS","ImagePicker","requestCameraRollPermissionsAsync","status","alert","launchImageLibraryAsync","mediaTypes","MediaTypeOptions","Images","allowsEditing","aspect","quality","result","console","log","cancelled","uri","setImageURI","takeImage","requestCameraPermissionsAsync","launchCameraAsync","width","height"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Image, View, Platform } from 'react-native';\nimport * as ImagePicker from 'expo-image-picker';\nimport Constants from 'expo-constants';\nimport { Button, ButtonText } from '../../theming/masterStyle'\nimport { ProfileImage } from '../../theming/createStyle'\nimport { ImageUploadArea, ImageUploadButtons, SelectedTheme } from '../../theming/settingStyle'\n\nexport default function ImagePickerExample(props) {\n  const [image, setImage] = useState(null);\n\n  const pickImage = async () => {\n    if (Platform.OS !== 'web') {\n        const { status } = await ImagePicker.requestCameraRollPermissionsAsync();\n        if (status !== 'granted') {\n          alert('Sorry, we need camera roll permissions to make this work!');\n        }\n      }\n    let result = await ImagePicker.launchImageLibraryAsync({\n      mediaTypes: ImagePicker.MediaTypeOptions.Images,\n      allowsEditing: true,\n      aspect: [4, 3],\n      quality: 1,\n    });\n\n    console.log(result);\n\n    if (!result.cancelled) {\n      setImage(result.uri);\n      console.log(\"set image\")\n      console.log(props)\n      props.setImageURI(result.uri)\n    }\n  };\n  const takeImage = async () => {\n    if (Platform.OS !== 'web') {\n        const { status } = await ImagePicker.requestCameraPermissionsAsync()\n        if (status !== 'granted') {\n            alert('Sorry, we need camera permissions to make this work!');\n          }\n      }\n    let result = await ImagePicker.launchCameraAsync({\n      mediaTypes: ImagePicker.MediaTypeOptions.Images,\n      allowsEditing: true,\n      aspect: [4, 3],\n      quality: 1,\n    });\n\n    console.log(result);\n\n    if (!result.cancelled) {\n        setImage(result.uri);\n        console.log(\"set image\")\n        console.log(props)\n        props.setImageURI(result.uri)\n    }\n  };\n\n  return (\n    <ImageUploadArea>\n        {image && <ProfileImage source={{ uri: image }} style={{ width: 200, height: 200 }} />}\n        <ImageUploadButtons>\n      <SelectedTheme onPress={pickImage}>\n        select image\n      </SelectedTheme>\n      <SelectedTheme onPress={takeImage}>\n        take a photo  \n      </SelectedTheme>\n      </ImageUploadButtons>\n      \n    </ImageUploadArea>\n  );\n}"]},"metadata":{},"sourceType":"script"}